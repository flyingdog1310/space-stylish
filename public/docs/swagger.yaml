openapi: 3.0.3
info:
  title: Space-Stylish E-commerce API
  description: |
    Space-Stylish E-commerce Website API Documentation

    This is a complete e-commerce platform API that provides the following features:
    - User registration, login and profile management
    - Product browsing, search and detailed information
    - Shopping cart and order management
    - Marketing campaign management
    - Sales reports and analytics
    - Admin functions

    ## Authentication
    Most APIs require JWT token authentication. Please include in the Authorization header:
    `Authorization: Bearer <your_jwt_token>`

    ## Rate Limiting
    - General APIs: 60 requests per second
    - API endpoints: 30 requests per second
    - Admin endpoints: 10 requests per second
    - Health check and static resources are excluded

    ## Response Format
    All APIs return a standardized response format:
    ```json
    {
      "success": true,
      "data": {...},
      "message": "Success message",
      "timestamp": "2024-01-01T00:00:00.000Z"
    }
    ```

    ## Environment Variables
    - `API_VERSION`: API version (default: v1)
    - `SERVER_PORT`: Server port
    - `JWT_SIGN_SECRET`: JWT signing secret
    - `PARTNER_KEY`: TapPay partner key
    - `MERCHANT_ID`: TapPay merchant ID
    - `APP_ID`: Facebook App ID
    - `APP_SECRET`: Facebook App Secret

  version: 2.0.0
  contact:
    name: Space-Stylish Team
    email: support@space-stylish.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Local development environment
  - url: https://api.space-stylish.com
    description: Production environment

tags:
  - name: Authentication
    description: User authentication related APIs
  - name: Products
    description: Product related APIs
  - name: Orders
    description: Order related APIs
  - name: Marketing
    description: Marketing campaign related APIs
  - name: Reports
    description: Report and analytics APIs
  - name: Admin
    description: Admin function APIs
  - name: Health
    description: System health check

paths:
  # Health check
  /health-check:
    get:
      tags:
        - Health
      summary: System health check
      description: Check if the API service is running normally
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  checks:
                    type: object
                    properties:
                      database:
                        type: boolean
                      redis:
                        type: boolean
                      server:
                        type: boolean
        "503":
          description: Service is unhealthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "unhealthy"
                  timestamp:
                    type: string
                    format: date-time
                  checks:
                    type: object

  # User authentication APIs
  /api/v1/user/signup:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  description: User name
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  description: User email
                  example: "john@example.com"
                password:
                  type: string
                  description: User password
                  example: "password123"
      responses:
        "200":
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        description: JWT access token
                      access_expired:
                        type: integer
                        description: Token expiration time (seconds)
                      user:
                        $ref: '#/components/schemas/User'
        "400":
          description: Request parameter error
          content:
            application/json:
              schema:
                type: string
                example: "email format is wrong"
        "403":
          description: Email already exists
          content:
            application/json:
              schema:
                type: string
                example: "email already exist"

  /api/v1/user/signin:
    post:
      tags:
        - Authentication
      summary: User login
      description: User login (supports native login and Facebook login)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required:
                    - provider
                    - email
                    - password
                  properties:
                    provider:
                      type: string
                      enum: [native]
                      description: Login method
                    email:
                      type: string
                      format: email
                      description: User email
                    password:
                      type: string
                      description: User password
                - type: object
                  required:
                    - provider
                    - access_token
                  properties:
                    provider:
                      type: string
                      enum: [facebook]
                      description: Login method
                    access_token:
                      type: string
                      description: Facebook access token
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                      access_expired:
                        type: integer
                      user:
                        $ref: '#/components/schemas/User'
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: string
                example: "Email is not registered"
        "403":
          description: Authentication failed
          content:
            application/json:
              schema:
                type: string
                example: "Password is wrong"

  /api/v1/user/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Get current user profile information
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
                example: "no token"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
                example: "invalid token"

  # Product APIs
  /api/v1/products:
    get:
      tags:
        - Products
      summary: Get products by category
      description: Get products with pagination and category filtering
      parameters:
        - name: category
          in: query
          description: Product category
          required: false
          schema:
            type: string
            enum: [all, women, men, accessories]
            default: all
        - name: paging
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
                properties:
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
                      pagination:
                        type: object
                        properties:
                          current:
                            type: integer
                          total:
                            type: integer
                          hasMore:
                            type: boolean
                          totalCount:
                            type: integer
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Products
      summary: Create product
      description: Create a new product (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - price
                - category
              properties:
                title:
                  type: string
                description:
                  type: string
                price:
                  type: number
                category:
                  type: string
                  enum: [women, men, accessories]
                texture:
                  type: string
                wash:
                  type: string
                place:
                  type: string
                note:
                  type: string
                story:
                  type: string
                main_image:
                  type: string
                variants:
                  type: array
                  items:
                    type: object
                    properties:
                      color_name:
                        type: string
                      color_code:
                        type: string
                      size:
                        type: string
                      stock:
                        type: integer
                images:
                  type: array
                  items:
                    type: string
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/products/search:
    get:
      tags:
        - Products
      summary: Search products
      description: Search products by keyword
      parameters:
        - name: keyword
          in: query
          description: Search keyword
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: Search completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/products/{id}:
    get:
      tags:
        - Products
      summary: Get product detail
      description: Get detailed product information by ID
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product detail retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Product'
                  message:
                    type: string
                    example: "Product detail retrieved successfully"
                  timestamp:
                    type: string
                    format: date-time
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Products
      summary: Update product
      description: Update product information (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                price:
                  type: number
                category:
                  type: string
                  enum: [women, men, accessories]
                texture:
                  type: string
                wash:
                  type: string
                place:
                  type: string
                note:
                  type: string
                story:
                  type: string
                main_image:
                  type: string
                variants:
                  type: array
                  items:
                    type: object
                    properties:
                      color_name:
                        type: string
                      color_code:
                        type: string
                      size:
                        type: string
                      stock:
                        type: integer
                images:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                  message:
                    type: string
                    example: "Product updated successfully"
                  timestamp:
                    type: string
                    format: date-time
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Product not found"
                  timestamp:
                    type: string
                    format: date-time
    delete:
      tags:
        - Products
      summary: Delete product
      description: Soft delete a product (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                  message:
                    type: string
                    example: "Product deleted successfully"
                  timestamp:
                    type: string
                    format: date-time
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Product not found"
                  timestamp:
                    type: string
                    format: date-time

  /api/v1/products/{id}/variants:
    get:
      tags:
        - Products
      summary: Get product variants
      description: Get all variants of a specific product
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product variants retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        color_code:
                          type: string
                        size:
                          type: string
                        stock:
                          type: integer
                  message:
                    type: string
                    example: "Product variants retrieved successfully"
                  timestamp:
                    type: string
                    format: date-time
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Product not found"
                  timestamp:
                    type: string
                    format: date-time

  # Marketing APIs
  /api/v1/marketing/campaigns:
    get:
      tags:
        - Marketing
      summary: Get marketing campaigns
      description: Get all active marketing campaigns
      responses:
        "200":
          description: Campaigns retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Campaign'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
                example: "Failed to get campaigns"

  # Order APIs
  /api/v1/order/checkout:
    post:
      tags:
        - Orders
      summary: Create order
      description: Create a new order with checkout process
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - prime
                - order
              properties:
                prime:
                  type: string
                  description: TapPay prime
                order:
                  type: object
                  properties:
                    shipping:
                      type: string
                    payment:
                      type: string
                    subtotal:
                      type: number
                    freight:
                      type: number
                    total:
                      type: number
                    recipient:
                      type: object
                      properties:
                        name:
                          type: string
                        phone:
                          type: string
                        email:
                          type: string
                        address:
                          type: string
                        time:
                          type: string
                    list:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          color_code:
                            type: string
                          size:
                            type: string
                          qty:
                            type: integer
      responses:
        "200":
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      number:
                        type: integer
                        description: Order ID
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: string
                example: "out of stock"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
                example: "no token"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: string
                example: "invalid token"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
                example: "Failed to process checkout"

  # Report APIs
  /api/v1/report/payments:
    get:
      tags:
        - Reports
      summary: Get payments report
      description: Get payments analytics report
      responses:
        "200":
          description: Report retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    description: Payment report data
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
                example: "Failed to get payments report"

  /api/v1/report/total:
    get:
      tags:
        - Reports
      summary: Get total sales
      description: Get total sales amount
      responses:
        "200":
          description: Total sales retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: number
                    description: Total sales amount
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
                example: "Failed to get total sales"

  /api/v1/report/sold_color_percent:
    get:
      tags:
        - Reports
      summary: Get sold color percentage
      description: Get percentage of sold products by color
      responses:
        "200":
          description: Color percentage retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  soldColor:
                    type: object
                    description: Color percentage data
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
                example: "Failed to get sold color percent"

  /api/v1/report/sold_price_percent:
    get:
      tags:
        - Reports
      summary: Get sold price percentage
      description: Get percentage of sold products by price range
      responses:
        "200":
          description: Price percentage retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  soldPrice:
                    type: object
                    description: Price percentage data
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
                example: "Failed to get sold price percent"

  /api/v1/report/top-five:
    get:
      tags:
        - Reports
      summary: Get top five products
      description: Get top five selling products
      responses:
        "200":
          description: Top five products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  topFive:
                    type: array
                    items:
                      type: object
                      description: Product sales data
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
                example: "Failed to get top five products"

  # Admin APIs
  /admin/create_role:
    post:
      tags:
        - Admin
      summary: Create role
      description: Create a new user role (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
                - access
              properties:
                role:
                  type: string
                  description: Role name
                access:
                  type: string
                  description: Role access permissions
      responses:
        "200":
          description: Role created successfully
          content:
            application/json:
              schema:
                type: string
                example: "New Role Successfully Created"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
                example: "Failed to create role"

  /admin/assign_role:
    post:
      tags:
        - Admin
      summary: Assign role to user
      description: Assign a role to a specific user (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - roleId
              properties:
                userId:
                  type: integer
                  description: User ID
                roleId:
                  type: integer
                  description: Role ID
      responses:
        "200":
          description: Role assigned successfully
          content:
            application/json:
              schema:
                type: string
                example: "New Role Successfully Assigned"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
                example: "Failed to assign role"

  /admin/create_product:
    post:
      tags:
        - Admin
      summary: Create product with images
      description: Create a new product with image uploads (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - category
                - title
                - price
              properties:
                main_image:
                  type: string
                  format: binary
                  description: Main product image
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Additional product images
                category:
                  type: string
                  enum: [women, men, accessories]
                title:
                  type: string
                description:
                  type: string
                price:
                  type: number
                texture:
                  type: string
                wash:
                  type: string
                place:
                  type: string
                note:
                  type: string
                story:
                  type: string
                variants:
                  type: array
                  items:
                    type: object
                    properties:
                      color_name:
                        type: string
                      color_code:
                        type: string
                      size:
                        type: string
                      stock:
                        type: integer
      responses:
        "200":
          description: Product created successfully
          content:
            application/json:
              schema:
                type: string
                example: "success"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
                example: "Failed to create product"

  /admin/create_campaign:
    post:
      tags:
        - Admin
      summary: Create marketing campaign
      description: Create a new marketing campaign (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - product_id
                - story
              properties:
                picture:
                  type: string
                  format: binary
                  description: Campaign image
                product_id:
                  type: integer
                  description: Associated product ID
                story:
                  type: string
                  description: Campaign story
      responses:
        "200":
          description: Campaign created successfully
          content:
            application/json:
              schema:
                type: string
                example: "New Campaign Successfully Created"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: string
                example: "chosen item does not exist"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
                example: "Failed to create campaign"

  /admin/get_orders:
    get:
      tags:
        - Admin
      summary: Get orders from external system
      description: Get orders from Azole system (Admin only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                description: Orders data from external system
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: string
                example: "Failed to get orders"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        data:
          type: object
        message:
          type: string
          example: "Error message"
        timestamp:
          type: string
          format: date-time
    Success:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
        message:
          type: string
          example: "Success message"
        timestamp:
          type: string
          format: date-time
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        category:
          type: string
          enum: [women, men, accessories]
          example: "women"
        title:
          type: string
          example: "Summer Dress"
        description:
          type: string
          example: "Beautiful summer dress"
        price:
          type: number
          example: 1000
        texture:
          type: string
          example: "Cotton"
        wash:
          type: string
          example: "Machine wash"
        place:
          type: string
          example: "Taiwan"
        note:
          type: string
          example: "Note about the product"
        story:
          type: string
          example: "Product story"
        main_image:
          type: string
          example: "/images/product1.jpg"
        colors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                example: "#FF0000"
              name:
                type: string
                example: "Red"
        sizes:
          type: array
          items:
            type: string
          example: ["S", "M", "L"]
        variants:
          type: array
          items:
            type: object
            properties:
              color_name:
                type: string
              color_code:
                type: string
              size:
                type: string
              stock:
                type: integer
        images:
          type: array
          items:
            type: string
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        picture:
          type: string
        role_id:
          type: integer
    Order:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        shipping:
          type: string
        payment:
          type: string
        subtotal:
          type: number
        freight:
          type: number
        total:
          type: number
        name:
          type: string
        phone:
          type: string
        email:
          type: string
        address:
          type: string
        status:
          type: string
        created_time:
          type: string
          format: date-time
    Campaign:
      type: object
      properties:
        id:
          type: integer
        product_id:
          type: integer
        picture:
          type: string
        story:
          type: string
        created_time:
          type: string
          format: date-time
